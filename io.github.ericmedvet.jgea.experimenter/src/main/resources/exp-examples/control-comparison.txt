ea.experiment(
  runs = (randomGenerator = (seed = [1:1:1]) * [ea.rg.defaultRG()]) *
    (problem = [
      ea.p.numEnvTo(environment = ds.e.navigation(arena = large_barrier); f = ds.e.n.avgD(); finalT = 50);
      ea.p.numEnvTo(environment = ds.e.navigation(arena = easy_maze); f = ds.e.n.avgD(); finalT = 50)
    ]) *
    (solver = (nEval = [2500]) * (mapper = [ea.m.compose(
      first = ea.m.mlpToMrf(innerLayerRatio = 5);
      second = ea.m.mrfToNds()
    )]) * [
      ea.s.ga(representation = ea.r.doubleString());
      ea.s.mapElites(representation = ea.r.doubleString(); descriptors = [
        ea.s.me.d.ofFitness(f = ea.nf.simulationBehavior(postF = ea.nf.composeU(preF = ds.e.n.closestRobotPosition(); postF = ds.e.n.x())); min = 0; max = 1; nOfBins = 10);
        ea.s.me.d.ofFitness(f = ea.nf.simulationBehavior(postF = ea.nf.composeU(preF = ds.e.n.closestRobotPosition(); postF = ds.e.n.y())); min = 0; max = 1; nOfBins = 10)
      ])
    ]) * [
    ea.run()
  ];
  listeners = [
    ea.l.console(
      functions = [
        ea.nf.size(f = ea.nf.genotype(individual = ea.nf.best()); s = "%3d");
        ea.nf.simulationQuality(s = "%6.2f"; preF = ea.nf.bestFitness());
        ea.nf.hist(collection = ea.nf.each(map = ea.nf.simulationQuality(preF = ea.nf.fitness()); collection = ea.nf.all()));
        ea.nf.percentile(collection = ea.nf.each(map = ea.nf.simulationQuality(preF = ea.nf.fitness()); collection = ea.nf.all()); p = 0.75; s = "%6.2f");
        ea.nf.simulationBehavior(preF = ea.nf.bestFitness(); postF = ea.nf.composeU(preF = ds.e.n.closestRobotPosition(); postF = ds.e.n.x()))
      ];
      runKeys = [
        ea.misc.sEntry(key = "problem.name"; value = "{problem.name}");
        ea.misc.sEntry(key = "solver"; value = "{solver.name}");
        ea.misc.sEntry(key = "seed"; value = "{randomGenerator.seed}")
      ]
    );
    ea.l.expPlotSaver(
      filePath = "../navigation-fitness.png";
      freeScales = true;
      w = 600; h = 1000;
      type = lines;
      plot = ea.plot.fitnessPlotMatrix(
        xFunction = ea.nf.quantized(f = ea.nf.evals(); r = 50);
        yFunction = ea.nf.simulationQuality(preF = ea.nf.bestFitness())
      )
    );
    ea.l.runImageVideoSaver(
      drawer = ds.d.navigation();
      function = ea.nf.simulationBehavior(preF = ea.nf.bestFitness());
      filePathTemplate = "../bests-{problem.name}-{solver.name}-{randomGenerator.seed:%04d}.mp4"
    );
    ea.l.runLastSimulationVideoSaver(
      drawer = ds.d.navigation();
      filePathTemplate = "../finalBest-{problem.name}-{solver.name}-{randomGenerator.seed:%04d}.mp4"
    );
    ea.l.runPlotSaver(
      w = 1000; h = 350;
      filePathTemplate = "../me-{problem.name}-{solver.name}-{randomGenerator.seed}.png";
      type = univariate_grid;
      plot = ea.plot.mapElitesPopulation(
        predicateValue = ea.nf.quantized(f = ea.nf.evals(); r = 1000; s = "%.0f");
        condition = ea.predicate.inD(
          values = [0; 500; 1000; 1500; 2000; 2500]
        );
        individualFunctions = [
          ea.nf.simulationQuality(preF = ea.nf.fitness())
        ]
      );
      condition = ea.predicate.all(conditions = [
        ea.predicate.matches(
          f = ea.nf.runKey(runKey = ea.misc.sEntry(key = "solver"; value = "{solver.name}"));
          regex = "me.*"
        );
        ea.predicate.inS(
          f = ea.nf.runKey(runKey = ea.misc.sEntry(key = "seed"; value = "{randomGenerator.seed}"));
          values = ["1"]
        )
      ])
    )
  ]
)