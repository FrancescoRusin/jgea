ea.experiment(
  runs = (randomGenerator = (seed = [1:1:10]) * [ea.rg.defaultRG()]) *
    (problem = [
      ea.p.ur.bundled(name = "concrete");
      ea.p.ur.bundled(name = "energy-efficiency");
      ea.p.ur.bundled(name = "wine")
    ]) *
    (solver = (nEval = [5000]) * [
      ea.s.ga(
        name = "gp";
        representation = ea.r.srTree();
        mapper = ea.m.srTreeToUrf()
      );
      ea.s.ga(
        name = "ga+mlp";
        representation = ea.r.doubleString();
        mapper = ea.m.compose(
          first = ea.m.mlpToMrf(activationFunction = relu);
          second = ea.m.mrfToUrf()
        )
      )
    ]) * [
    ea.run()
  ];
  listeners = [
    ea.l.console(
      functions = [
        ea.nf.size(f = ea.nf.genotype(individual = ea.nf.best()); s = "%3d");
        ea.nf.bestFitness(s = "%6.2f");
        ea.nf.validationFitness(s = "%6.2f");
        ea.nf.hist(collection = ea.nf.each(map = ea.nf.fitness(); collection = ea.nf.all()));
        ea.nf.percentile(collection = ea.nf.each(map = ea.nf.fitness(); collection = ea.nf.all()); p = 0.75; s = "%6.2f")
      ];
      runKeys = [
        ea.misc.sEntry(key = "problem.name"; value = "{problem.name}");
        ea.misc.sEntry(key = "solver"; value = "{solver.name}");
        ea.misc.sEntry(key = "seed"; value = "{randomGenerator.seed}")
      ]
    );
    ea.l.expPlotSaver(
      filePath = "../sr-train-fitness.png";
      freeScales = true;
      w = 600; h = 1000;
      type = lines;
      plot = ea.plot.fitnessPlotMatrix(
        xFunction = ea.nf.quantized(f = ea.nf.evals(); r = 50; s = "%.0f")
      )
    );
    ea.l.expPlotSaver(
      filePath = "../sr-test-fitness.png";
      freeScales = true;
      w = 600; h = 1000;
      type = lines;
      plot = ea.plot.fitnessPlotMatrix(
        xFunction = ea.nf.quantized(f = ea.nf.evals(); r = 50; s = "%.0f");
        yFunction = ea.nf.validationFitness()
      )
    )
  ]
)