ea.experiment(
  runs =
    (randomGenerator = (seed = [1:1:5]) * [m.defaultRG()]) *
    (solver = (nEval = [5000]) *
    (representation = [ea.r.intString()]) * [
      ea.s.ga(maxUniquenessAttempts = 0);
      ea.s.mapElites(name = "me-3"; descriptors = [
        ea.s.me.d.descriptor(f = f.avg(of = f.nkTh(of = ea.f.toDoubleString(of = ea.f.genotype()); n = 3; k = 0)); min = -1; max = 1);
        ea.s.me.d.descriptor(f = f.avg(of = f.nkTh(of = ea.f.toDoubleString(of = ea.f.genotype()); n = 3; k = 1)); min = -1; max = 1)
      ]);
      ea.s.mapElites(name = "me-2"; descriptors = [
        ea.s.me.d.descriptor(f = f.avg(of = f.nkTh(of = ea.f.toDoubleString(of = ea.f.genotype()); n = 2; k = 0)); min = -1; max = 1);
        ea.s.me.d.descriptor(f = f.avg(of = f.nkTh(of = ea.f.toDoubleString(of = ea.f.genotype()); n = 2; k = 1)); min = -1; max = 1)
      ]);
      ea.s.cabea(name = "cabea-e-11"; keepProbability = 0; substrate = empty; gridSize = 11);
      ea.s.cabea(name = "cabea-cc-11"; keepProbability = 0; substrate = contour_cross; gridSize = 11);
      ea.s.cabea(name = "cabea-e-21"; keepProbability = 0; substrate = empty; gridSize = 21);
      ea.s.cabea(name = "cabea-cc-21"; keepProbability = 0; substrate = contour_cross; gridSize = 21)
    ]) * (problem = [
      ea.p.s.multiModalIntOneMax(name = "mt-25-3"; nOfTargets = 3; p = 25)
    ]) * [
    ea.run()
  ];
  listeners = [
    ea.l.console(
      functions = [
        ea.f.size(of = ea.f.genotype(of = ea.f.best()); format = "%3d");
        ea.f.quality(of = ea.f.best(); format = "%6.4f");
        ea.f.hist(of = f.each(of = ea.f.all(); mapF = ea.f.quality()));
        f.percentile(of = f.each(of = ea.f.all(); mapF = ea.f.quality()); p = 75; format = "%6.4f");
        ea.f.overallTargetDistance();
        ea.f.solution(of = ea.f.best(); format = "%40.40s")
      ]
    );
    ea.l.expPlotSaver(
      filePath = "../mm-d-25-3-fitness-vs-evals.png";
      w = 600; h = 700;
      type = lines;
      plot = ea.plot.qualityPlotMatrix(xFunction = f.quantized(of = ea.f.nOfEvals(); q = 250))
    );
    ea.l.expPlotSaver(
      filePath = "../mm-d-25-3-fitness-boxplot.png";
      w = 600; h = 700;
      type = boxplot;
      plot = ea.plot.qualityBoxplotMatrix()
    );
    ea.l.expPlotSaver(
      filePath = "../mm-d-25-3-otd-vs-evals.png";
      w = 600; h = 700;
      type = lines;
      plot = ea.plot.qualityPlotMatrix(
        xFunction = f.quantized(of = ea.f.nOfEvals(); q = 250);
        yFunction = ea.f.overallTargetDistance()
      )
    );
    ea.l.expPlotSaver(
      filePath = "../mm-d-25-3-otd-boxplot.png";
      w = 600; h = 700;
      freeScales = true;
      type = boxplot;
      plot = ea.plot.qualityBoxplotMatrix(yFunction = ea.f.overallTargetDistance())
    );
    ea.l.runPlotSaver(
      w = 1000; h = 700;
      filePathTemplate = "../grids-{problem.name}-{solver.name}-{randomGenerator.seed}.png";
      type = univariate_grid;
      plot = ea.plot.gridPopulation(
        individualFunctions = [
          ea.f.quality();
          f.nTh(of = ea.f.targetDistances(problem = ea.p.s.multiModalIntOneMax(nOfTargets = 3; p = 25)); n = 0);
          f.nTh(of = ea.f.targetDistances(problem = ea.p.s.multiModalIntOneMax(nOfTargets = 3; p = 25)); n = 1);
          f.nTh(of = ea.f.targetDistances(problem = ea.p.s.multiModalIntOneMax(nOfTargets = 3; p = 25)); n = 2)
        ];
        predicateValue = f.quantized(of = ea.f.nOfEvals(); q = 1000);
        condition = predicate.inD(
          values = [0; 5000; 10000; 15000; 20000; 25000]
        )
      );
      condition = predicate.all(conditions = [
        predicate.matches(
          f = ea.f.runKey(runKey = ea.misc.sEntry(key = "solver"; value = "{solver.name}"));
          regex = "cabea.*"
        );
        predicate.inS(
          f = ea.f.runKey(runKey = ea.misc.sEntry(key = "seed"; value = "{randomGenerator.seed}"));
          values = ["1"]
        )
      ])
    );
    ea.l.runPlotSaver(
      w = 1000; h = 350;
      filePathTemplate = "../me-{problem.name}-{solver.name}-{randomGenerator.seed}.png";
      type = univariate_grid;
      plot = ea.plot.mapElitesPopulation(
        predicateValue = f.quantized(of = ea.f.nOfEvals(); q = 1000);
        condition = predicate.inD(
          values = [0; 5000; 10000; 15000; 20000; 25000]
        )
      );
      condition = predicate.all(conditions = [
        predicate.matches(
          f = ea.f.runKey(runKey = ea.misc.sEntry(key = "solver"; value = "{solver.name}"));
          regex = "me.*"
        );
        predicate.inS(
          f = ea.f.runKey(runKey = ea.misc.sEntry(key = "seed"; value = "{randomGenerator.seed}"));
          values = ["1"]
        )
      ])
    )
  ]
)