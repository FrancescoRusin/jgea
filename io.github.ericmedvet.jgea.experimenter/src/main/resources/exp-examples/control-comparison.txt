ea.experiment(
  runs = (randomGenerator = (seed = [1:1:3]) * [m.defaultRG()]) *
    (problem = [
      ea.p.numEnvTo(environment = ds.e.navigation(arena = a_barrier); f = ds.e.n.finalD(); finalT = 50);
      ea.p.numEnvTo(environment = ds.e.navigation(arena = easy_maze); f = ds.e.n.finalD(); finalT = 50)
    ]) *
    (solver = (nEval = [5000]) * (mapper = ea.m.dsToNpnds(npnds = ds.num.mlp())) * [
      ea.s.ga(representation = ea.r.doubleString());
      ea.s.mapElites(
        name = "me-closest";
        representation = ea.r.doubleString();
        descriptors = [
          ea.s.me.d.descriptor(f = ds.e.n.x(of = ds.e.n.closestRobotP(of = ea.f.simOutcome(of = ea.f.quality()))); min = 0; max = 1; nOfBins = 10);
          ea.s.me.d.descriptor(f = ds.e.n.y(of = ds.e.n.closestRobotP(of = ea.f.simOutcome(of = ea.f.quality()))); min = 0; max = 1; nOfBins = 10)
        ]
      );
      ea.s.mapElites(
        name = "me-final";
        representation = ea.r.doubleString();
        descriptors = [
          ea.s.me.d.descriptor(f = ds.e.n.x(of = ds.e.n.finalRobotP(of = ea.f.simOutcome(of = ea.f.quality()))); min = 0; max = 1; nOfBins = 10);
          ea.s.me.d.descriptor(f = ds.e.n.y(of = ds.e.n.finalRobotP(of = ea.f.simOutcome(of = ea.f.quality()))); min = 0; max = 1; nOfBins = 10)
        ]
      )
    ]) * [
    ea.run()
  ];
  listeners = [
    ea.l.console(
      functions = [
        ea.f.size(of = ea.f.genotype(of = ea.f.best()); format = "%3d");
        ea.f.simQuality(of = ea.f.quality(of = ea.f.best()); format = "%5.2f");
        ea.f.hist(of = f.each(of = ea.f.all(); mapF = ea.f.simQuality(of = ea.f.quality())));
        ea.f.meBin(of = f.nTh(of = ea.f.meCoordinates(of = ea.f.best()); n = 0));
        ea.f.meBin(of = f.nTh(of = ea.f.meCoordinates(of = ea.f.best()); n = 1));
        ea.f.meValue(of = f.nTh(of = ea.f.meCoordinates(of = ea.f.best()); n = 0));
        ea.f.meValue(of = f.nTh(of = ea.f.meCoordinates(of = ea.f.best()); n = 1));
        ea.f.id(of = ea.f.best());
        f.nTh(of = ea.f.parentIds(of = ea.f.best()); n = 0);
        f.nTh(of = ea.f.parentIds(of = ea.f.best()); n = 1)
      ];
      onlyLast = true
    );
    ea.l.bestCsv(
      path = "../{name}-best.csv";
      functions = [
        ea.f.size(of = ea.f.genotype(of = ea.f.best()); format = "%3d");
        ea.f.simQuality(of = ea.f.quality(of = ea.f.best()); format = "%5.2f");
        ea.f.meBin(of = f.nTh(of = ea.f.meCoordinates(of = ea.f.best()); n = 0));
        ea.f.meBin(of = f.nTh(of = ea.f.meCoordinates(of = ea.f.best()); n = 1));
        ea.f.meValue(of = f.nTh(of = ea.f.meCoordinates(of = ea.f.best()); n = 0));
        ea.f.meValue(of = f.nTh(of = ea.f.meCoordinates(of = ea.f.best()); n = 1));
        ea.f.id(of = ea.f.best());
        f.nTh(of = ea.f.parentIds(of = ea.f.best()); n = 0);
        f.nTh(of = ea.f.parentIds(of = ea.f.best()); n = 1)
      ]
    );
    ea.l.savePlotForExp(
      path = "../{name}-fitness";
      plot = ea.plot.multi.quality(q = ea.f.simQuality())
    )
  ]
)