ea.experiment(
  runs = (randomGenerator = (seed = [1:1:3]) * [m.defaultRG()]) *
    (problem = [
      ea.p.numEnvTo(environment = ds.e.navigation(arena = large_barrier); f = ds.e.n.finalD(); finalT = 50);
      ea.p.numEnvTo(environment = ds.e.navigation(arena = easy_maze); f = ds.e.n.finalD(); finalT = 50)
    ]) *
    (solver = (nEval = [5000]) * (mapper = [ea.m.compose(
      first = ea.m.mlpToMrf(innerLayerRatio = 5);
      second = ea.m.mrfToNds()
    )]) * [
      ea.s.ga(representation = ea.r.doubleString());
      ea.s.mapElites(
        name = "me-closest";
        representation = ea.r.doubleString();
        descriptors = [
          ea.s.me.d.descriptor(f = ds.e.n.x(of = ds.e.n.closestRobotP(of = ea.f.simOutcome(of = ea.f.quality()))); min = 0; max = 1; nOfBins = 10);
          ea.s.me.d.descriptor(f = ds.e.n.y(of = ds.e.n.closestRobotP(of = ea.f.simOutcome(of = ea.f.quality()))); min = 0; max = 1; nOfBins = 10)
        ]
      );
      ea.s.mapElites(
        name = "me-final";
        representation = ea.r.doubleString();
        descriptors = [
          ea.s.me.d.descriptor(f = ds.e.n.x(of = ds.e.n.finalRobotP(of = ea.f.simOutcome(of = ea.f.quality()))); min = 0; max = 1; nOfBins = 10);
          ea.s.me.d.descriptor(f = ds.e.n.y(of = ds.e.n.finalRobotP(of = ea.f.simOutcome(of = ea.f.quality()))); min = 0; max = 1; nOfBins = 10)
        ]
      )
    ]) * [
    ea.run()
  ];
  listeners = [
    ea.l.console(
      functions = [
        ea.f.size(of = ea.f.genotype(of = ea.f.best()); format = "%3d");
        ea.f.simQuality(of = ea.f.quality(of = ea.f.best()); format = "%5.2f");
        ea.f.hist(of = f.each(of = ea.f.all(); mapF = ea.f.simQuality(of = ea.f.quality())))
      ];
      runKeys = [
        ea.misc.sEntry(key = "problem.name"; value = "{problem.name}");
        ea.misc.sEntry(key = "solver"; value = "{solver.name}");
        ea.misc.sEntry(key = "seed"; value = "{randomGenerator.seed}")
      ]
    );
    ea.l.expPlotSaver(
      filePath = "../navigation-fitness.png";
      freeScales = true;
      w = 600; h = 1000;
      type = lines;
      plot = ea.plot.qualityPlotMatrix(
        xFunction = f.quantized(of = ea.f.nOfEvals(); q = 200);
        yFunction = ea.f.simQuality(of = ea.f.quality(of = ea.f.best()))
      )
    );
    ea.l.runImageVideoSaver(
      drawer = ds.d.navigation();
      function = ds.f.simOutcome(of = ea.f.simOutcome(of = ea.f.quality(of = ea.f.best())));
      filePathTemplate = "../bests-{problem.name}-{solver.name}-{randomGenerator.seed:%04d}.mp4";
      condition = ea.predicate.all(conditions = [
        ea.predicate.inS(
          f = ea.f.runKey(runKey = ea.misc.sEntry(key = "seed"; value = "{randomGenerator.seed}"));
          values = ["1"]
        )
      ])
    );
    ea.l.runLastSimulationVideoSaver(
      drawer = ds.d.navigation();
      filePathTemplate = "../finalBest-{problem.name}-{solver.name}-{randomGenerator.seed:%04d}.mp4";
      condition = ea.predicate.all(conditions = [
        ea.predicate.inS(
          f = ea.f.runKey(runKey = ea.misc.sEntry(key = "seed"; value = "{randomGenerator.seed}"));
          values = ["1"]
        )
      ])
    );
    ea.l.runPlotSaver(
      w = 1500; h = 350;
      filePathTemplate = "../me-{problem.name}-{solver.name}-{randomGenerator.seed}.png";
      type = univariate_grid;
      plot = ea.plot.mapElitesPopulation(
        predicateValue = f.quantized(of = ea.f.nOfEvals(); q = 500);
        condition = ea.predicate.inD(
          values = [0; 500; 1000; 1500; 2000; 2500; 3500; 5000]
        );
        individualFunctions = [
          ea.f.simQuality(of = ea.f.quality())
        ]
      );
      condition = ea.predicate.all(conditions = [
        ea.predicate.matches(
          f = ea.f.runKey(runKey = ea.misc.sEntry(key = "solver"; value = "{solver.name}"));
          regex = "me.*"
        );
        ea.predicate.inS(
          f = ea.f.runKey(runKey = ea.misc.sEntry(key = "seed"; value = "{randomGenerator.seed}"));
          values = ["1"]
        )
      ])
    )
  ]
)