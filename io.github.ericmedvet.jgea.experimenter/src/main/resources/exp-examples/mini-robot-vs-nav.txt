ea.experiment(
  runs = (randomGenerator = (seed = [1]) * [m.defaultRG()]) * [ea.run(
      problem = ea.p.simTo(
        simulation = ds.s.variableSensorPositionsNavigation(arena = e_maze);
        f = ds.e.n.avgD();
        type = minimize
      );
      solver = ea.s.mapElites(
        representation = ea.representation.pair(
          first = ea.representation.doubleString();
          second = ea.representation.multiSRTree()
        );
        mapper = ea.mapper.pair(
          second = ea.mapper.nmrfToNds(of = ea.mapper.multiSrTreeToNmrf())
        );
        nPop = 100;
        nEval = 4000;
        descriptors = [
          ea.s.me.d.descriptor(
            f = ds.e.n.x(of = ds.e.n.finalRobotP(of = ea.f.simOutcome(of = ea.f.quality())));
            min = 0;
            max = 1;
            nOfBins = 10
          );
          ea.s.me.d.descriptor(
            f = ds.e.n.y(of = ds.e.n.finalRobotP(of = ea.f.simOutcome(of = ea.f.quality())));
            min = 0;
            max = 1;
            nOfBins = 10
          )
        ]
      )
    )
  ];
  listeners = [
    ea.l.console(
      functions = [
        ea.f.simQuality(of = ea.f.quality(of = ea.f.best()); format = "%9.5f");
        f.nTh(of = f.pairFirst(of = ea.f.solution(of = ea.f.best())); n = 0; format = "%+4.2f");
        f.nTh(of = f.pairFirst(of = ea.f.solution(of = ea.f.best())); n = 1; format = "%+4.2f");
        f.nTh(of = f.pairFirst(of = ea.f.solution(of = ea.f.best())); n = 2; format = "%+4.2f");
        f.nTh(of = f.pairFirst(of = ea.f.solution(of = ea.f.best())); n = 3; format = "%+4.2f");
        f.nTh(of = f.pairFirst(of = ea.f.solution(of = ea.f.best())); n = 4; format = "%+4.2f")
      ]
    );
    ea.l.runSaver(
      filePathTemplate = "../best-traj-{solver.name}-{randomGenerator.seed:%04d}";
      of = ea.acc.lastBest();
      processors = [ea.f.toImage(image = ds.d.navigation(); of = ea.f.simOutcome(of = ea.f.quality()))]
    );
    ea.l.expPlotSaver(
      filePath = "../fitness";
      of = ea.plot.multi.quality(y = ea.f.simQuality(of = ea.f.quality(of = ea.f.best())))
    )
  ]
)