ea.experiment(
  runs =
    (randomGenerator = (seed = [1:1:5]) * [m.defaultRG()]) *
    (solver = (nEval = [10000]) *
    (representation = [ea.r.doubleString()]) * [
      ea.s.nsga2(maxUniquenessAttempts = 0);
      ea.s.ga(maxUniquenessAttempts = 0);
      ea.s.mapElites(name = "me-3"; descriptors = [
        ea.s.me.d.descriptor(f = f.avg(of = f.nkTh(of = ea.f.genotype(); n = 3; k = 0)); min = -1; max = 1);
        ea.s.me.d.descriptor(f = f.avg(of = f.nkTh(of = ea.f.genotype(); n = 3; k = 1)); min = -1; max = 1)
      ]);
      ea.s.mapElites(name = "me-2"; descriptors = [
        ea.s.me.d.descriptor(f = f.avg(of = f.nkTh(of = ea.f.genotype(); n = 2; k = 0)); min = -1; max = 1);
        ea.s.me.d.descriptor(f = f.avg(of = f.nkTh(of = ea.f.genotype(); n = 2; k = 1)); min = -1; max = 1)
      ]);
      ea.s.cabea(name = "cabea-e-11"; keepProbability = 0; substrate = empty; gridSize = 11);
      ea.s.cabea(name = "cabea-cc-11"; keepProbability = 0; substrate = contour_cross; gridSize = 11);
      ea.s.cabea(name = "cabea-e-21"; keepProbability = 0; substrate = empty; gridSize = 21);
      ea.s.cabea(name = "cabea-cc-21"; keepProbability = 0; substrate = contour_cross; gridSize = 21)
    ]) * (problem = [
      ea.p.toMho(name = "mt2mo-cpa-2-2"; mtProblem = ea.p.s.circularPointsAiming(n = 2; p = 2));
      ea.p.toMho(name = "mt2mo-cpa-2-10"; mtProblem = ea.p.s.circularPointsAiming(n = 2; p = 10));
      ea.p.toMho(name = "mt2mo-cpa-2-50"; mtProblem = ea.p.s.circularPointsAiming(n = 2; p = 50))
    ]) * [
    ea.run()
  ];
  listeners = [
    ea.l.console(
      functions = [
        ea.f.size(of = ea.f.genotype(of = ea.f.best()); format = "%3d");
        f.nTh(of = ea.f.quality(of = ea.f.best(); format = "%6.4f"); n = 0; format = "%4.2f");
        f.nTh(of = ea.f.quality(of = ea.f.best(); format = "%6.4f"); n = 1; format = "%4.2f");
        f.min(of = f.each(of = ea.f.all(); mapF = f.nTh(of = ea.f.quality(); n = 0)); format = "%4.2f");
        f.min(of = f.each(of = ea.f.all(); mapF = f.nTh(of = ea.f.quality(); n = 1)); format = "%4.2f");
        ea.f.hypervolume2D(
          of = f.each(of = ea.f.firsts(); mapF = ea.f.quality());
          minReference = [0; 0];
          maxReference = [5; 5];
          format = "%5.2f"
        )
      ];
      onlyLast = false
    );
    ea.l.expPlotSaver(
      filePath = "../monum-hv-vs-evals";
      of = ea.plot.multi.xyExp(
        y = ea.f.hypervolume2D(
          of = f.each(of = ea.f.firsts(); mapF = ea.f.quality());
          minReference = [0; 0];
          maxReference = [5; 5]
        )
      )
    );
    ea.l.expPlotSaver(
      filePath = "../monum-hv-boxplot";
      of = ea.plot.multi.yBoxplotExp(
        y = ea.f.hypervolume2D(
          of = f.each(of = ea.f.firsts(); mapF = ea.f.quality());
          minReference = [0; 0];
          maxReference = [5; 5]
        )
      )
    );
    ea.l.expPlotSaver(
      filePath = "../monum-obj0-vs-evals";
      of = ea.plot.multi.xyExp(
        y = f.min(of = f.each(of = ea.f.all(); mapF = f.nTh(of = ea.f.quality(); n = 0)))
      )
    );
    ea.l.expPlotSaver(
      filePath = "../monum-obj1-vs-evals";
      of = ea.plot.multi.xyExp(
        y = f.min(of = f.each(of = ea.f.all(); mapF = f.nTh(of = ea.f.quality(); n = 1)))
      )
    );
    ea.l.runPlotSaver(
      filePathTemplate = "../grids-{problem.name}-{solver.name}-{randomGenerator.seed}";
      of = ea.plot.single.gridState(
        values = [
          f.nTh(of = ea.f.quality(); n = 0);
          f.nTh(of = ea.f.quality(); n = 1)
        ]
      );
      condition = predicate.all(conditions = [
        predicate.matches(f = ea.f.runKey(key = "solver.name"); regex = "cabea.*");
        predicate.inS(f = ea.f.runKey(key = "randomGenerator.seed"); values = ["1"])
      ])
    );
    ea.l.runPlotSaver(
      filePathTemplate = "../fronts-{problem.name}-{solver.name}-{randomGenerator.seed}";
      of = ea.plot.single.biObjectivePopulation(
        xRange = m.range(min = 0; max = 1);
        yRange = m.range(min = 0; max = 1)
      );
      condition = predicate.all(conditions = [
        predicate.inS(f = ea.f.runKey(key = "randomGenerator.seed"); values = ["1"])
      ]);
      processors = [ea.f.imagePlotter(secondary = true)]
    );
    ea.l.runPlotSaver(
      filePathTemplate = "../me-{problem.name}-{solver.name}-{randomGenerator.seed}";
      of = ea.plot.single.me(
        values = [
          f.nTh(of = ea.f.quality(); n = 0);
          f.nTh(of = ea.f.quality(); n = 1)
        ]
      );
      condition = predicate.all(conditions = [
        predicate.matches(f = ea.f.runKey(key = "solver.name"); regex = "me.*");
        predicate.inS(f = ea.f.runKey(key = "randomGenerator.seed"); values = ["1"])
      ])
    )
  ]
)