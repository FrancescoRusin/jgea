ea.experiment(
  runs = (randomGenerator = (seed = [1:1:5]) * [m.defaultRG()]) *
    (problem = [
      ea.p.s.charShapeApproximation(target = circle);
      ea.p.s.charShapeApproximation(target = "worm-a");
      ea.p.s.charShapeApproximation(target = "worm-ab");
      ea.p.s.charShapeApproximation(target = alternated);
      ea.p.s.charShapeApproximation(target = dog)
    ]) *
    (solver = (nEval = [10000]) *
    (representation = [ea.r.bitString()]) * [
      ea.s.ga(mapper = ea.m.bsToGrammarGrid(grammar = ea.grammar.gridBundled(name = monodirectional)));
      ea.s.ga(mapper = ea.m.bsToGrammarGrid(grammar = ea.grammar.gridBundled(name = bidirectional)));
      ea.s.ga(mapper = ea.m.bsToGrammarGrid(grammar = ea.grammar.gridBundled(name = worm)));
      ea.s.ga(mapper = ea.m.bsToGrammarGrid(grammar = ea.grammar.gridBundled(name = alternated)));
      ea.s.ga(mapper = ea.m.bsToGrammarGrid(grammar = ea.grammar.gridBundled(name = "dog-shape")))
    ]) * [
    ea.run()
  ];
  listeners = [
    ea.l.console(
      functions = [
        ea.f.size(of = ea.f.genotype(of = ea.f.best()); format = "%3d");
        ea.f.quality(of = ea.f.best(); format = "%6.2f");
        ea.f.hist(of = f.each(of = ea.f.all(); mapF = ea.f.quality()));
        f.gridCount(of = ea.f.solution(of = ea.f.best()));
        f.gridW(of = ea.f.solution(of = ea.f.best()));
        f.gridH(of = ea.f.solution(of = ea.f.best()))
      ];
      runFunctions = [
        ea.f.runKey(key = "problem.target");
        ea.f.runKey(key = "solver.mapper.grammar.name");
      ]
      onlyLast = true
    );
    ea.l.runAllIterationsVideoSaver(
      image = ea.d.polyomino(maxW = 12; maxH = 12);
      function = ea.f.solution(of = ea.f.best());
      filePathTemplate = "../bests-{problem.target}-{solver.mapper.grammar.name}-{randomGenerator.seed:%04d}.mp4";
      condition = predicate.all(conditions = [
        predicate.inS(
          f = ea.f.runKey(runKey = ea.misc.sEntry(key = "seed"; value = "{randomGenerator.seed}"));
          values = ["1"]
        );
        predicate.inS(
          f = ea.f.runKey(runKey = ea.misc.sEntry(key = "target"; value = "{problem.target}"));
          values = ["dog"; "circle"]
        )
      ]);
      w = 500; h = 500
    );
    ea.l.runAllIterationsVideoSaver(
      image = ea.d.polyomino(
        maxW = 16;
        maxH = 16;
        colors = ea.misc.map(entries = [
          ea.misc.entry(key = ea.misc.ch(s = "s"); value = ea.misc.colorByRgb(r = 209; g = 35; b = 42));
          ea.misc.entry(key = ea.misc.ch(s = "a"); value = ea.misc.colorByRgb(r = 48; g = 111; b = 28));
          ea.misc.entry(key = ea.misc.ch(s = "h"); value = ea.misc.colorByRgb(r = 50; g = 116; b = 181))
        ])
      );
      function = ea.f.solution(of = ea.f.best());
      filePathTemplate = "../bests-dogcolors-{problem.target}-{solver.mapper.grammar.name}-{randomGenerator.seed:%04d}.mp4";
      condition = predicate.all(conditions = [
        predicate.inS(
          f = ea.f.runKey(runKey = ea.misc.sEntry(key = "seed"; value = "{randomGenerator.seed}"));
          values = ["1"]
        );
        predicate.inS(
          f = ea.f.runKey(runKey = ea.misc.sEntry(key = "grammar"; value = "{solver.mapper.grammar.name}"));
          values = ["dog-shape"]
        )
      ]);
      w = 500; h = 500
    );
    ea.l.expPlotSaver(
      filePath = "../polyominoes-bench-fitness.png";
      freeScales = true;
      w = 1000; h = 1000;
      type = lines;
      plot = ea.plot.qualityPlotMatrix(
        ySubplotRunKey = ea.misc.sEntry(key = "target"; value = "{problem.target}");
        lineRunKey = ea.misc.sEntry(key = "grammar"; value = "{solver.mapper.grammar.name}")
      )
    )
  ]
)