ea.experiment(
  runs =
    (randomGenerator = (seed = [1:1:1]) * [ea.rg.defaultRG()]) *
    (solver = (nEval = [25000]) *
    (representation = [ea.r.doubleString()]) * [
      ea.s.ga(maxUniquenessAttempts = 0);
      ea.s.nsga2(maxUniquenessAttempts = 0);
      ea.s.mapElites(name = "me-3"; descriptors = [
        ea.s.me.d.ofSolution(f = ea.nf.avg(collection = ea.nf.nthItems(n = 3; k = 0)); min = -1; max = 1);
        ea.s.me.d.ofSolution(f = ea.nf.avg(collection = ea.nf.nthItems(n = 3; k = 1)); min = -1; max = 1)
      ]);
      ea.s.mapElites(name = "me-2"; descriptors = [
        ea.s.me.d.ofSolution(f = ea.nf.avg(collection = ea.nf.nthItems(n = 2; k = 0)); min = -1; max = 1);
        ea.s.me.d.ofSolution(f = ea.nf.avg(collection = ea.nf.nthItems(n = 2; k = 1)); min = -1; max = 1)
      ]);
      ea.s.cabea(name = "cabea-e-11"; keepProbability = 0; substrate = empty; gridSize = 11);
      ea.s.cabea(name = "cabea-cc-11"; keepProbability = 0; substrate = contour_cross; gridSize = 11);
      ea.s.cabea(name = "cabea-e-21"; keepProbability = 0; substrate = empty; gridSize = 21);
      ea.s.cabea(name = "cabea-cc-21"; keepProbability = 0; substrate = contour_cross; gridSize = 21)
    ]) * (problem = [
      ea.p.mhoProblem(name = "mt2mo-cpa-2-2"; mtProblem = ea.p.s.circularPointsAiming(n = 2; p = 2));
      ea.p.mhoProblem(name = "mt2mo-cpa-2-10"; mtProblem = ea.p.s.circularPointsAiming(n = 2; p = 10));
      ea.p.mhoProblem(name = "mt2mo-cpa-2-50"; mtProblem = ea.p.s.circularPointsAiming(n = 2; p = 50))
    ]) * [
    ea.run()
  ];
  listeners = [
    ea.l.console(
      functions = [
        ea.nf.size(f = ea.nf.genotype(individual = ea.nf.best()); s = "%3d");
        ea.nf.bestFitness(f = ea.nf.nth(n = 0); s = "%4.2f");
        ea.nf.bestFitness(f = ea.nf.nth(n = 1); s = "%4.2f");
        ea.nf.max(collection = ea.nf.each(map = ea.nf.fitness(f = ea.nf.nth(n = 0)); collection = ea.nf.all()); s = "%4.2f");
        ea.nf.max(collection = ea.nf.each(map = ea.nf.fitness(f = ea.nf.nth(n = 1)); collection = ea.nf.all()); s = "%4.2f");
        ea.nf.hypervolume2D(
          collection = ea.nf.each(map = ea.nf.fitness(); collection = ea.nf.firsts());
          reference = [1; 1];
          s = "%4.2f"
        )
      ];
      runKeys = [
        ea.misc.sEntry(key = "solver"; value = "{solver.name}");
        ea.misc.sEntry(key = "problem"; value = "{problem.name}");
        ea.misc.sEntry(key = "seed"; value = "{randomGenerator.seed}")
      ]
    );
    ea.l.expPlotSaver(
      filePath = "../monum-hv-vs-evals.png";
      w = 600; h = 700;
      saveCsvData = true;
      type = lines;
      plot = ea.plot.fitnessPlotMatrix(
        xFunction = ea.nf.quantized(f = ea.nf.evals(); r = 250; s = "%.0f");
        yFunction = ea.nf.hypervolume2D(
          collection = ea.nf.each(map = ea.nf.fitness(); collection = ea.nf.firsts());
          reference = [1; 1]
        )
      )
    );
    ea.l.expPlotSaver(
      filePath = "../monum-hv-boxplot.png";
      w = 600; h = 700;
      freeScales = true;
      saveCsvData = true;
      type = boxplot;
      plot = ea.plot.fitnessBoxplotMatrix(
        yFunction = ea.nf.hypervolume2D(
          collection = ea.nf.each(map = ea.nf.fitness(); collection = ea.nf.firsts());
          reference = [1; 1]
        )
      )
    );
    ea.l.expPlotSaver(
      filePath = "../monum-obj0-vs-evals.png";
      w = 600; h = 700;
      saveCsvDataMode = paper_friendly;
      type = lines;
      plot = ea.plot.fitnessPlotMatrix(
        xFunction = ea.nf.quantized(f = ea.nf.evals(); r = 250; s = "%.0f");
        yFunction = ea.nf.min(collection = ea.nf.each(map = ea.nf.fitness(f = ea.nf.nth(n = 0)); collection = ea.nf.all()))
      )
    );
    ea.l.expPlotSaver(
      w = 600; h = 700;
      filePath = "../monum-obj1-vs-evals.png";
      saveCsvDataMode = paper_friendly;
      type = lines;
      plot = ea.plot.fitnessPlotMatrix(
        xFunction = ea.nf.quantized(f = ea.nf.evals(); r = 250; s = "%.0f");
        yFunction = ea.nf.min(collection = ea.nf.each(map = ea.nf.fitness(f = ea.nf.nth(n = 1)); collection = ea.nf.all()))
      )
    );
    ea.l.runPlotSaver(
      w = 1000; h = 700;
      filePathTemplate = "../grids-{problem.name}-{solver.name}-{randomGenerator.seed}.png";
      type = univariate_grid;
      saveCsvDataMode = paper_friendly;
      plot = ea.plot.gridPopulation(
        individualFunctions = [
          ea.nf.fitness(f = ea.nf.nth(n = 0));
          ea.nf.fitness(f = ea.nf.nth(n = 1))
        ];
        predicateValue = ea.nf.quantized(f = ea.nf.evals(); r = 1000; s = "%.0f");
        condition = ea.predicate.inD(
          values = [0; 5000; 10000; 15000; 20000; 25000]
        )
      );
      condition = ea.predicate.all(conditions = [
        ea.predicate.matches(
          f = ea.nf.runKey(runKey = ea.misc.sEntry(key = "solver"; value = "{solver.name}"));
          regex = "cabea.*"
        );
        ea.predicate.inS(
          f = ea.nf.runKey(runKey = ea.misc.sEntry(key = "seed"; value = "{randomGenerator.seed}"));
          values = ["1"]
        )
      ])
    );
    ea.l.runPlotSaver(
      w = 1000; h = 300;
      filePathTemplate = "../fronts-{problem.name}-{solver.name}-{randomGenerator.seed}.png";
      saveCsvDataMode = paper_friendly;
      type = points;
      plot = ea.plot.biObjectivePopulation(
        predicateValue = ea.nf.quantized(f = ea.nf.evals(); r = 1000; s = "%.0f");
        condition = ea.predicate.inD(
          values = [0; 5000; 10000; 15000; 20000; 25000]
        );
        xRange = ds.range(min = 0; max = 1);
        yRange = ds.range(min = 0; max = 1)
      );
      condition = ea.predicate.all(conditions = [
        ea.predicate.inS(
          f = ea.nf.runKey(runKey = ea.misc.sEntry(key = "seed"; value = "{randomGenerator.seed}"));
          values = ["1"]
        )
      ])
    );
    ea.l.runPlotSaver(
      w = 1000; h = 350;
      filePathTemplate = "../me-{problem.name}-{solver.name}-{randomGenerator.seed}.png";
      type = univariate_grid;
      saveCsvDataMode = paper_friendly;
      plot = ea.plot.mapElitesPopulation(
        predicateValue = ea.nf.quantized(f = ea.nf.evals(); r = 1000; s = "%.0f");
        individualFunctions = [
          ea.nf.fitness(f = ea.nf.nth(n = 0));
          ea.nf.fitness(f = ea.nf.nth(n = 1))
        ];
        condition = ea.predicate.inD(
          values = [0; 5000; 10000; 15000; 20000; 25000]
        )
      );
      condition = ea.predicate.all(conditions = [
        ea.predicate.matches(
          f = ea.nf.runKey(runKey = ea.misc.sEntry(key = "solver"; value = "{solver.name}"));
          regex = "me.*"
        );
        ea.predicate.inS(
          f = ea.nf.runKey(runKey = ea.misc.sEntry(key = "seed"; value = "{randomGenerator.seed}"));
          values = ["1"]
        )
      ])
    )
  ]
)