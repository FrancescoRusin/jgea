ea.experiment(
  runs = (randomGenerator = (seed = [1:1:1]) * [ea.rg.defaultRG()]) *
    (solver = (nEval = [10000]) * [
      ea.s.bitStringMapElites(descriptors = [
        ea.s.me.d.ofSolution(f = ea.nf.avg(collection = ea.nf.nthItems(n = 2; k = 0; list = ea.nf.bitStringAsNumbers())));
        ea.s.me.d.ofSolution(f = ea.nf.avg(collection = ea.nf.nthItems(n = 2; k = 1; list = ea.nf.bitStringAsNumbers())))
      ]);
      ea.s.bitStringGa()
    ]) * (problem = (p = [100]) * [ea.p.s.oneMax()]) * [ea.run()];
  listeners = [
    ea.l.console(
      functions = [
        ea.nf.size(f = ea.nf.genotype(individual = ea.nf.best()); s = "%3d");
        ea.nf.bestFitness(s = "%6.4f");
        ea.nf.hist(collection = ea.nf.each(map = ea.nf.fitness(); collection = ea.nf.all()));
        ea.nf.percentile(collection = ea.nf.each(map = ea.nf.fitness(); collection = ea.nf.all()); p = 0.75; s = "%6.4f");
        ea.nf.solution(individual = ea.nf.best(); s = "%60.60s")
      ];
      runKeys = [
        ea.misc.sEntry(key = "problem.p"; value = "{problem.p}");
        ea.misc.sEntry(key = "solver"; value = "{solver:%#s}");
        ea.misc.sEntry(key = "seed"; value = "{randomGenerator.seed}")
      ]
    )
  ]
)