ea.experiment(
  runs =
    (randomGenerator = (seed = [1:1:1]) * [ea.rg.defaultRG()]) *
    (solver = (nEval = [25000]) *
    (representation = [ea.r.doubleString()]) * [
      ea.s.ga(maxUniquenessAttempts = 0);
      ea.s.mapElites(name = "me-3"; descriptors = [
        ea.s.me.d.ofSolution(f = ea.nf.avg(collection = ea.nf.nthItems(n = 3; k = 0)); min = -1; max = 1);
        ea.s.me.d.ofSolution(f = ea.nf.avg(collection = ea.nf.nthItems(n = 3; k = 1)); min = -1; max = 1)
      ]);
      ea.s.mapElites(name = "me-2"; descriptors = [
        ea.s.me.d.ofSolution(f = ea.nf.avg(collection = ea.nf.nthItems(n = 2; k = 0)); min = -1; max = 1);
        ea.s.me.d.ofSolution(f = ea.nf.avg(collection = ea.nf.nthItems(n = 2; k = 1)); min = -1; max = 1)
      ]);
      ea.s.pso();
      ea.s.cabea(name = "cabea-e-11"; keepProbability = 0; substrate = empty; gridSize = 11);
      ea.s.cabea(name = "cabea-cc-11"; keepProbability = 0; substrate = contour_cross; gridSize = 11);
      ea.s.cabea(name = "cabea-e-21"; keepProbability = 0; substrate = empty; gridSize = 21);
      ea.s.cabea(name = "cabea-cc-21"; keepProbability = 0; substrate = contour_cross; gridSize = 21)
    ]) * (problem = [
      ea.p.s.circularPointsAiming(name = "cpa-3-2"; n = 3; p = 2)
    ]) * [
    ea.run()
  ];
  listeners = [
    ea.l.console(
      functions = [
        ea.nf.size(f = ea.nf.genotype(individual = ea.nf.best()); s = "%3d");
        ea.nf.bestFitness(s = "%5.3f");
        ea.nf.overallTargetDistance(
          collection = ea.nf.each(map = ea.nf.solution(); collection = ea.nf.all());
          problem = ea.p.s.circularPointsAiming(name = "cpa-3-2"; n = 3; p = 2)
        )
      ];
      runKeys = [
        ea.misc.sEntry(key = "solver"; value = "{solver.name}");
        ea.misc.sEntry(key = "problem"; value = "{problem.name}");
        ea.misc.sEntry(key = "seed"; value = "{randomGenerator.seed}")
      ]
    );
    ea.l.expPlotSaver(
      filePath = "../mmnum-fitness-vs-evals.png";
      w = 900; h = 600;
      freeScales = true;
      saveCsvData = true;
      type = lines;
      plot = ea.plot.fitnessPlotMatrix()
    );
    ea.l.expPlotSaver(
      filePath = "../mmnum-otd-vs-evals.png";
      w = 900; h = 600;
      freeScales = true;
      type = lines;
      saveCsvData = true;
      plot = ea.plot.fitnessPlotMatrix(
        yFunction = ea.nf.overallTargetDistance(
          collection = ea.nf.each(map = ea.nf.solution(); collection = ea.nf.all());
          problem = ea.p.s.circularPointsAiming(name = "cpa-3-2"; n = 3; p = 2)
        )
      )
    );
    ea.l.runPlotSaver(
      w = 1000; h = 700;
      filePathTemplate = "../grids-{problem.name}-{solver.name}-{randomGenerator.seed}.png";
      saveCsvData = true;
      type = univariate_grid;
      plot = ea.plot.gridPopulation(
        individualFunctions = [
          ea.nf.fitness();
          ea.nf.nth(n = 0; list = ea.nf.targetDistances(problem = ea.p.s.circularPointsAiming(name = "cpa-3-2"; n = 3; p = 2)));
          ea.nf.nth(n = 1; list = ea.nf.targetDistances(problem = ea.p.s.circularPointsAiming(name = "cpa-3-2"; n = 3; p = 2)));
          ea.nf.nth(n = 2; list = ea.nf.targetDistances(problem = ea.p.s.circularPointsAiming(name = "cpa-3-2"; n = 3; p = 2)))
        ];
        predicateValue = ea.nf.quantized(f = ea.nf.evals(); r = 1000; s = "%.0f");
        condition = ea.predicate.inD(
          values = [0; 5000; 10000; 15000; 20000; 25000]
        )
      );
      condition = ea.predicate.all(conditions = [
        ea.predicate.matches(
          f = ea.nf.runKey(runKey = ea.misc.sEntry(key = "solver"; value = "{solver.name}"));
          regex = "cabea.*"
        );
        ea.predicate.inS(
          f = ea.nf.runKey(runKey = ea.misc.sEntry(key = "seed"; value = "{randomGenerator.seed}"));
          values = ["1"]
        )
      ])
    );
    ea.l.runPlotSaver(
      w = 1000; h = 350;
      filePathTemplate = "../me-{problem.name}-{solver.name}-{randomGenerator.seed}.png";
      type = univariate_grid;
      saveCsvData = true;
      plot = ea.plot.mapElitesPopulation(
        predicateValue = ea.nf.quantized(f = ea.nf.evals(); r = 1000; s = "%.0f");
        condition = ea.predicate.inD(
          values = [0; 5000; 10000; 15000; 20000; 25000]
        )
      );
      condition = ea.predicate.all(conditions = [
        ea.predicate.matches(
          f = ea.nf.runKey(runKey = ea.misc.sEntry(key = "solver"; value = "{solver.name}"));
          regex = "me.*"
        );
        ea.predicate.inS(
          f = ea.nf.runKey(runKey = ea.misc.sEntry(key = "seed"; value = "{randomGenerator.seed}"));
          values = ["1"]
        )
      ])
    )
  ]
)