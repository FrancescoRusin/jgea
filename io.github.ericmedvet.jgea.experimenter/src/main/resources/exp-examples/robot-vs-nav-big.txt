% ======== DESCRIPTORS ========
$fBehav1 = f.as(of = ds.e.n.x(of = ds.e.n.finalRobotP(of = ea.f.simOutcome(of = ea.f.quality()))); name = "final.x")
$fBehav2 = f.as(of = ds.e.n.y(of = ds.e.n.finalRobotP(of = ea.f.simOutcome(of = ea.f.quality()))); name = "final.y")
$fBody1 = f.avg()
$fBody2 = f.sd()
$fBrain1 = f.as(
  of = f.mathOp(op = add; args = [
    ea.f.treeSize(of = f.nTh(n = 0));
    ea.f.treeSize(of = f.nTh(n = 1))
  ]);
  name = "brain.size"
)
$fBrain2 = f.as(
  of = f.mathOp(op = add; args = [
    f.size(of = f.filter(of = f.distinct(of = ea.f.treeLeaves(of = f.nTh(n = 0))); condition = predicate.matches(f = f.toString(); regex = "i[0-9]+")));
    f.size(of = f.filter(of = f.distinct(of = ea.f.treeLeaves(of = f.nTh(n = 1))); condition = predicate.matches(f = f.toString(); regex = "i[0-9]+")))
  ]);
  name = "brain.vars"
)

$descBehav1 = ea.s.me.d.descriptor(f = $fBehav1; min = 0; max = 1; nOfBins = 10)
$descBehav2 = ea.s.me.d.descriptor(f = $fBehav2; min = 0; max = 1; nOfBins = 10)
$descBody1 = ea.s.me.d.descriptor(f = f.composition(of = f.pairFirst(of = ea.f.genotype()); then = $fBody1); min = -1.57; max = 1.57; nOfBins = 10)
$descBody2 = ea.s.me.d.descriptor(f = f.composition(of = f.pairFirst(of = ea.f.genotype()); then = $fBody2); min = 0; max = 3.14; nOfBins = 10)
$coDescBody1 = ea.s.me.d.descriptor(f = f.composition(of = ea.f.genotype(); then = $fBody1); min = -1.57; max = 1.57; nOfBins = 10)
$coDescBody2 = ea.s.me.d.descriptor(f = f.composition(of = ea.f.genotype(); then = $fBody2); min = 0; max = 3.14; nOfBins = 10)
$descBrain1 = ea.s.me.d.descriptor(f = f.composition(of = f.pairSecond(of = ea.f.genotype()); then = $fBrain1); min = 0; max = 500; nOfBins = 10)
$descBrain2 = ea.s.me.d.descriptor(f = f.composition(of = f.pairSecond(of = ea.f.genotype()); then = $fBrain2); min = 0; max = 20; nOfBins = 10)
$coDescBrain1 = ea.s.me.d.descriptor(f = f.composition(of = ea.f.genotype(); then = $fBrain1); min = 0; max = 500; nOfBins = 10)
$coDescBrain2 = ea.s.me.d.descriptor(f = f.composition(of = ea.f.genotype(); then = $fBrain2); min = 0; max = 20; nOfBins = 10)
$coords = f.as(
  of = f.all(fs = [
    ea.f.descBin(descriptor = $descBody1);
    ea.f.descBin(descriptor = $descBody2);
    ea.f.descBin(descriptor = $descBrain1);
    ea.f.descBin(descriptor = $descBrain2)
  ]);
  name = "desc.coords"
)

% ======== SUCCESS ========
$successT = 0.05
$diversePop = f.as(name = "diverse.pop"; of = f.distinctSortedByKey(
  of = ea.f.all();
  key = $coords;
  sort = ea.f.simQuality(of = ea.f.quality())
))
$popSuccess = f.as(name = "n.success"; of = f.sizeIfLt(
  allF = ea.f.all();
  mapF = ds.e.n.finalD(of = ea.f.simOutcome(of = ea.f.quality()));
  t = $successT;
  format = "%3d"
))
$popDistinctSuccess = f.as(name = "diverse.n.success"; of = f.sizeIfLt(
  allF = $diversePop;
  mapF = ds.e.n.finalD(of = ea.f.simOutcome(of = ea.f.quality()));
  t = $successT;
  format = "%3d"
))

% ======== PROBLEM ========
$simTime = 30
$fitnessF = ds.e.n.finalD()

% ======== OTHER ========
$evalsQuant = 2500
$telegram = ea.c.telegram(botIdFilePath = "/home/eric/Documenti/experiments/tlg.txt"; chatId = "207490209")

% ======== EXP ========
ea.experiment(

  runs = (randomGenerator = (seed = [1:1:10]) * [m.defaultRG()]) *
  (solver = (nEval = [50000]) * + (strategy = [
    random;
    smoothed_local_best;
    local_best;
    global_best;
    central;
    identity
  ]) * [
    % ======== COME ========
    ea.s.coMapElites(
      representation1 = ea.representation.doubleString();
      representation2 = ea.representation.multiSRTree();
      mapper1 = ea.m.identity();
      mapper2 = ea.mapper.nmrfToNds(of = ea.mapper.multiSrTreeToNmrf());
      merger = ea.m.identity();
      neighborRadius = 1.1;
      descriptors1 = [$coDescBody1; $coDescBody2];
      descriptors2 = [$coDescBrain1; $coDescBrain2]
    )
  ] + 1 *
    % ======== GA AND ME ========
    (mapper = [ea.mapper.pair(second = ea.mapper.nmrfToNds(of = ea.mapper.multiSrTreeToNmrf()))]) *
    (representation = [ea.representation.pair(first = ea.representation.doubleString(); second = ea.representation.multiSRTree())]) * [
    ea.s.ga();
    ea.s.mapElites(name = "me2-pos"; descriptors = [$descBehav1; $descBehav2]);
    ea.s.mapElites(name = "me2-body"; descriptors = [$descBody1; $descBody2]);
    ea.s.mapElites(name = "me2-brain"; descriptors = [$descBrain1; $descBrain2]);
    ea.s.mapElites(name = "me4-body+brain"; descriptors = [$descBody1; $descBody2; $descBrain1; $descBrain2])
  ]) * (problem = (simulation = (arena = [
    a_maze;
    b_maze;
    c_maze;
    d_maze
  ]) * [
    ds.s.variableSensorPositionsNavigation(nOfSensors = 9; finalT = $simTime)
  ]) * [ea.p.simTo(f = $fitnessF; type = minimize)]) * [ea.run()];

  listeners = + + [

    % ======== CONSOLE AND CSV ========
    ea.l.console(
      functions = [
        ea.f.simQuality(of = ea.f.quality(of = ea.f.best()); format = "%7.5f");
        ds.e.n.finalD(of = ea.f.simOutcome(of = ea.f.quality(of = ea.f.best())); format = "%7.5f");
        $popSuccess;
        $popDistinctSuccess
      ];
      onlyLast = false
    );
    ea.l.bestCsv(
      path = "../../experiments/{name}/{startTime}/all-iterations";
      functions = [
        ea.f.simQuality(of = ea.f.quality(of = ea.f.best()));
        ds.e.n.finalD(of = ea.f.simOutcome(of = ea.f.quality(of = ea.f.best())));
        $popSuccess;
        $popDistinctSuccess
      ];
      runFunctions = [
        ea.f.runKey(key = "run.problem.simulation.arena")
      ];
      onlyLast = false
    );
    ea.l.bestCsv(
      path = "../../experiments/{name}/{startTime}/last-iterations";
      functions = + [
        ea.f.simQuality(of = ea.f.quality(of = ea.f.best()));
        ds.e.n.finalD(of = ea.f.simOutcome(of = ea.f.quality(of = ea.f.best())));
        $popSuccess;
        $popDistinctSuccess
      ] + [
        f.sizeIfLt(
          allF = ea.f.all();
          mapF = ea.f.simQuality(of = ea.f.fromProblem(of = ea.f.solution(); problem = ea.p.simTo(f = ds.e.n.avgD(); type = minimize; simulation = ds.s.variableSensorPositionsNavigation(nOfSensors = 9; finalT = $simTime; arena = a_maze))));
          t = $successT
        );
        f.sizeIfLt(
          allF = ea.f.all();
          mapF = ea.f.simQuality(of = ea.f.fromProblem(of = ea.f.solution(); problem = ea.p.simTo(f = ds.e.n.avgD(); type = minimize; simulation = ds.s.variableSensorPositionsNavigation(nOfSensors = 9; finalT = $simTime; arena = b_maze))));
          t = $successT
        );
        f.sizeIfLt(
          allF = ea.f.all();
          mapF = ea.f.simQuality(of = ea.f.fromProblem(of = ea.f.solution(); problem = ea.p.simTo(f = ds.e.n.avgD(); type = minimize; simulation = ds.s.variableSensorPositionsNavigation(nOfSensors = 9; finalT = $simTime; arena = c_maze))));
          t = $successT
        );
        f.sizeIfLt(
          allF = ea.f.all();
          mapF = ea.f.simQuality(of = ea.f.fromProblem(of = ea.f.solution(); problem = ea.p.simTo(f = ds.e.n.avgD(); type = minimize; simulation = ds.s.variableSensorPositionsNavigation(nOfSensors = 9; finalT = $simTime; arena = d_maze))));
          t = $successT
        )
      ];
      runFunctions = [
        ea.f.runKey(key = "run.problem.simulation.arena")
      ];
      onlyLast = true
    );

    % ======== IMAGES AND VIDEOS ========
    ea.l.onRunDone(
      of = ea.acc.lastBest();
      preprocessor = ea.f.toVideo(video = ea.misc.toVideo(drawer = ds.d.navigation()); of = ea.f.simOutcome(of = ea.f.quality()));
      consumers = [
        % $telegram;
        ea.c.saver(path = "../../experiments/{name}/{startTime}/{run.solver.name}/{run.problem.simulation.arena}/best-traj-{run.randomGenerator.seed:%03d}")
      ]
    );
    ea.l.onRunDone(
      of = ea.acc.lastBest();
      preprocessor = ea.f.toImage(image = ds.d.navigation(); of = ea.f.simOutcome(of = ea.f.quality()));
      consumers = [
        % $telegram;
        ea.c.saver(path = "../../experiments/{name}/{startTime}/{run.solver.name}/{run.problem.simulation.arena}/best-traj-{run.randomGenerator.seed:%03d}")
      ]
    );
    ea.l.saveForRun(
      path = "../../experiments/{name}/{startTime}/{run.solver.name}/{run.problem.simulation.arena}/trajs-{run.randomGenerator.seed:%03d}";
      of = ea.acc.bests();
      processor = ea.f.toImagesVideo(image = ds.d.navigation(); of = f.each(mapF = ea.f.simOutcome(of = ea.f.quality())))
    );

    % ======== RUN PLOTS ========
    ea.l.saveForRun(
      path = "../../experiments/{name}/{startTime}/{run.solver.name}/{run.problem.simulation.arena}/archive-{run.randomGenerator.seed:%03d}";
      of = ea.plot.single.me(q = ea.f.simQuality(); condition = predicate.always());
      processor = ea.f.videoPlotter();
      condition = predicate.matches(f = ea.f.runKey(key = "run.solver.name"); regex = "me2-.*")
    );
    ea.l.saveForRun(
      path = "../../experiments/{name}/{startTime}/{run.solver.name}/{run.problem.simulation.arena}/archives-{run.randomGenerator.seed:%03d}";
      of = ea.plot.single.coMe(q = ea.f.simQuality(); condition = predicate.always());
      processor = ea.f.videoPlotter();
      condition = predicate.matches(f = ea.f.runKey(key = "run.solver.name"); regex = "coMe-.*")
    );
    ea.l.onRunDone(
      of = ea.plot.single.me(q = ea.f.simQuality());
      consumers = [
        ea.c.saver(path = "../../experiments/{name}/{startTime}/{run.solver.name}/{run.problem.simulation.arena}/archive-{run.randomGenerator.seed:%03d}"; of = ea.f.imagePlotter());
        ea.c.saver(path = "../../experiments/{name}/{startTime}/{run.solver.name}/{run.problem.simulation.arena}/archive-{run.randomGenerator.seed:%03d}"; of = ea.f.csvPlotter())
      ];
      condition = predicate.matches(f = ea.f.runKey(key = "run.solver.name"); regex = "me2-.*")
    );
    ea.l.onRunDone(
      of = ea.plot.single.coMe(q = ea.f.simQuality());
      consumers = [
        ea.c.saver(path = "../../experiments/{name}/{startTime}/{run.solver.name}/{run.problem.simulation.arena}/archives-{run.randomGenerator.seed:%03d}"; of = ea.f.imagePlotter());
        ea.c.saver(path = "../../experiments/{name}/{startTime}/{run.solver.name}/{run.problem.simulation.arena}/archives-{run.randomGenerator.seed:%03d}"; of = ea.f.csvPlotter())
      ];
      condition = predicate.matches(f = ea.f.runKey(key = "run.solver.name"); regex = "coMe-.*")
    );
    ea.l.onRunDone(
      of = ea.plot.single.coMeStrategies();
      consumers = [
        ea.c.saver(path = "../../experiments/{name}/{startTime}/{run.solver.name}/{run.problem.simulation.arena}/come-strategy-{run.randomGenerator.seed:%03d}"; of = ea.f.imagePlotter());
        ea.c.saver(path = "../../experiments/{name}/{startTime}/{run.solver.name}/{run.problem.simulation.arena}/come-strategy-{run.randomGenerator.seed:%03d}"; of = ea.f.csvPlotter())
      ];
      condition = predicate.matches(f = ea.f.runKey(key = "run.solver.name"); regex = "coMe-.*")
    );

    % ======== EXP PLOTS ========
    ea.l.onExpDone(
      of = ea.plot.multi.quality(q = ea.f.simQuality(); x = f.quantized(q = $evalsQuant; of = ea.f.nOfEvals()));
      consumers = [
        % $telegram;
        ea.c.saver(path = "../../experiments/{name}/{startTime}/fitness-evals"; of = ea.f.imagePlotter());
        ea.c.saver(path = "../../experiments/{name}/{startTime}/fitness-evals"; of = ea.f.csvPlotter())
      ]
    );
    ea.l.onExpDone(
      of = ea.plot.multi.quality(q = ea.f.simQuality(); x = ea.f.nOfIterations());
      consumers = [
        % $telegram;
        ea.c.saver(path = "../../experiments/{name}/{startTime}/fitness-iters"; of = ea.f.imagePlotter());
        ea.c.saver(path = "../../experiments/{name}/{startTime}/fitness-iters"; of = ea.f.csvPlotter())
      ]
    );
    ea.l.onExpDone(
      of = ea.plot.multi.qualityBoxplot(q = ea.f.simQuality());
      consumers = [
        % $telegram;
        ea.c.saver(path = "../../experiments/{name}/{startTime}/final-fitness"; of = ea.f.imagePlotter());
        ea.c.saver(path = "../../experiments/{name}/{startTime}/final-fitness"; of = ea.f.csvPlotter())
      ]
    );
    ea.l.onExpDone(
      of = ea.plot.multi.yBoxplotExp(y = $popDistinctSuccess);
      consumers = [
        % $telegram;
        ea.c.saver(path = "../../experiments/{name}/{startTime}/final-distinct-pop-success"; of = ea.f.imagePlotter());
        ea.c.saver(path = "../../experiments/{name}/{startTime}/final-distinct-pop-success"; of = ea.f.csvPlotter())
      ]
    );
    ea.l.onExpDone(
      of = ea.plot.multi.yBoxplotExp(y = $popSuccess);
      consumers = [
        % $telegram;
        ea.c.saver(path = "../../experiments/{name}/{startTime}/final-pop-success"; of = ea.f.imagePlotter());
        ea.c.saver(path = "../../experiments/{name}/{startTime}/final-pop-success"; of = ea.f.csvPlotter())
      ]
    );
    ea.l.onExpDone(
      of = ea.plot.multi.xyExp(y = $popDistinctSuccess; x = f.quantized(q = $evalsQuant; of = ea.f.nOfEvals()));
      consumers = [
        % $telegram;
        ea.c.saver(path = "../../experiments/{name}/{startTime}/distinct-pop-success-evals"; of = ea.f.imagePlotter());
        ea.c.saver(path = "../../experiments/{name}/{startTime}/distinct-pop-success-evals"; of = ea.f.csvPlotter())
      ]
    );
    ea.l.onExpDone(
      of = ea.plot.multi.xyExp(y = $popDistinctSuccess; x = ea.f.nOfIterations());
      consumers = [
        % $telegram;
        ea.c.saver(path = "../../experiments/{name}/{startTime}/distinct-pop-success-iters"; of = ea.f.imagePlotter());
        ea.c.saver(path = "../../experiments/{name}/{startTime}/distinct-pop-success-iters"; of = ea.f.csvPlotter())
      ]
    );
    ea.l.onExpDone(
      of = ea.plot.multi.xyExp(y = f.size(of = ea.f.all()); x = f.quantized(q = $evalsQuant; of = ea.f.nOfEvals()));
      consumers = [
        % $telegram;
        ea.c.saver(path = "../../experiments/{name}/{startTime}/pop-size-evals"; of = ea.f.imagePlotter());
        ea.c.saver(path = "../../experiments/{name}/{startTime}/pop-size-evals"; of = ea.f.csvPlotter())
      ]
    );
    ea.l.onExpDone(
      of = ea.plot.multi.xyExp(y = f.size(of = ea.f.all()); x = f.quantized(q = $evalsQuant; of = ea.f.nOfEvals()));
      consumers = [
        % $telegram;
        ea.c.saver(path = "../../experiments/{name}/{startTime}/pop-size-iters"; of = ea.f.imagePlotter());
        ea.c.saver(path = "../../experiments/{name}/{startTime}/pop-size-iters"; of = ea.f.csvPlotter())
      ]
    )
  ] +
  % ======== VALIDATION IMAGES ========
  (processor = (of = (of = (simulation = (arena = [
    a_maze;
    % b_maze;
    % c_maze;
    d_maze
  ]) * [
    ds.s.variableSensorPositionsNavigation(nOfSensors = 9; finalT = $simTime)
  ]) * [ea.p.simTo(f = ds.e.n.avgD(); type = minimize)]) * [ea.f.simOutcome()]) * [ea.f.toImage(image = ds.d.navigation())]) * [
    ea.l.saveForRun(
      path = "../../experiments/{name}/{startTime}/{run.solver.name}/{run.problem.simulation.arena}/best-validation-traj-{run.randomGenerator.seed:%03d}";
      of = ea.acc.last(eFunction = ea.f.solution(of = ea.f.best()))
    )
  ] +

  % ======== VALIDATION PLOTS ========
  (of = (v = (problem = (simulation = (arena = [
    a_maze;
    % b_maze;
    % c_maze;
    d_maze
  ]) * [
    ds.s.variableSensorPositionsNavigation(nOfSensors = 9; finalT = $simTime)
  ]) * [ea.p.simTo(f = ds.e.n.avgD(); type = minimize)]) * [ea.f.fromProblem()]) * [ea.plot.s.populationValidation(q = ea.f.simQuality())]) * [
    ea.l.onRunDone(
      consumers = [
        ea.c.saver(path = "../../experiments/{name}/{startTime}/{run.solver.name}/{run.problem.simulation.arena}/evo-vs-validation-{run.randomGenerator.seed:%03d}"; of = ea.f.imagePlotter(secondary = true; independences = []));
        ea.c.saver(path = "../../experiments/{name}/{startTime}/{run.solver.name}/{run.problem.simulation.arena}/evo-vs-validation-{run.randomGenerator.seed:%03d}"; of = ea.f.csvPlotter())
      ]
    )
  ]
)